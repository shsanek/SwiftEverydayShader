@Shader
struct Function: IVertexFunction, IFragmentFunction {
    @InputCount var count: Int = 0
    @Buffer(fragmentIndex: 1) var index: [Int] = []
}
---
struct Function: IVertexFunction, IFragmentFunction {
    @InputCount var count: Int = 0
    var index: [Int] = [] {
        set {
            _indexBufferContainer.values = newValue
        }
        get {
            _indexBufferContainer.values
        }
    }

    private var _indexBufferContainer: BufferContainer<Int> = .init([])

    var _readyForRendering: Bool {
        return count > 0
    }
    func _render(encoder: MTLRenderCommandEncoder, device: MTLDevice, primitive: MTLPrimitiveType) throws {
        encoder.drawPrimitives(type: primitive, vertexStart: 0, vertexCount: count)
    }

    func _prepareFragment(encoder: MTLRenderCommandEncoder, device: MTLDevice) throws {
        try encoder.setFragmentBuffer(_indexBufferContainer.getBuffer(for: device), offset: 0, index: 1)
    }
}
